<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>New DavBlog!~</title>
    <link>https://giiitdavid.github.io/</link>
    <description>Recent content on New DavBlog!~</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://giiitdavid.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/0.-%E5%BF%83%E6%85%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/0.-%E5%BF%83%E6%85%8B/</guid>
      <description>&lt;p&gt;程序员的统一别称叫“学生”！光學不練該死。&#xA;一輩子地學習，65岁前都要學，在五年經驗是個決定差距時間，學到老，代碼學習看沒用的只有敲了才是自己的。&#xA;Learning like WarThunder grinding&lt;/p&gt;&#xA;&lt;p&gt;最后总结的三点： ①选好学习路线，笃定地、沉下心去学习； ②营造一个适合学习环境和氛围； ③注意学习的节奏、习惯以及动力。&#xA;理解，運用，反思與歸納&lt;/p&gt;&#xA;&lt;p&gt;本課程要996學習&lt;/p&gt;&#xA;&lt;h2 id=&#34;百戰程序員java&#34;&gt;百戰程序員java&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.itjc8.com&#34;&gt;www.itjc8.com&lt;/a&gt;@_#9xvXzl0R7OL&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.itjc8.com/forum.php?mod=viewthread&amp;amp;tid=12083&amp;amp;highlight=java%2B%E7%99%BE%E6%88%98&#34;&gt;https://www.itjc8.com/forum.php?mod=viewthread&amp;amp;tid=12083&amp;amp;highlight=java%2B%E7%99%BE%E6%88%98&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pan.baidu.com/s/1xkUwVzzIrSuRD9B8HTAfsA&#34;&gt;https://pan.baidu.com/s/1xkUwVzzIrSuRD9B8HTAfsA&lt;/a&gt;&#xA;A9uk&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://Itjc8.com&#34;&gt;Itjc8.com&lt;/a&gt;&#xA;itleaner —&amp;gt; formal 1&lt;del&gt;6&lt;/del&gt;0@It&lt;/p&gt;&#xA;&lt;p&gt;-准备阶段：一个电子笔记；&#xA;一个项目：推荐使用idea的父Pom多个子module继承结构的项目（顺便练手搭建项目），并且上传到自己的github或者码云上面&#xA;-学习阶段：看一系列视频或者一本书籍，做笔记，做笔记不要盲目把教学者或者书上的内容一字不落写在笔记上，要有自己理解，用自己的话描述出来并记录&#xA;-实践阶段：思考所学知识可以用在什么场景上（一般书籍或者视频都会说吧），然后设计场景将所学知识运用在上面，期间只能看笔记或者网上搜索api，如果笔记看不懂，说明笔记内容表达方式有问题，此时需要返回去学习阶段调整笔记内容和记录方式，直到自己再去看能迅速理解的内容&#xA;-总结：理解转化做记录，结合场景学技术，一个项目全罩住&lt;/p&gt;&#xA;&lt;p&gt;速成路線：優先&lt;a href=&#34;https://www.bilibili.com/video/BV155411M7SE/?vd_source=849a9624b00c3a23c2ee11fcfdf28d56&#34;&gt;【自学编程】JAVA速成学习路线 | 快速上岸直达面试_哔哩哔哩_bilibili&lt;/a&gt;&#xA;補充：&#xA;&lt;a href=&#34;https://www.bilibili.com/video/BV1sn4y1X7jP/?vd_source=849a9624b00c3a23c2ee11fcfdf28d56&#34;&gt;零基础Java学习路线_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.codefather.cn/post/1640584449888772098#heading-0&#34;&gt;编程导航 - 程序员一站式编程学习交流社区，做您编程学习路上的导航员&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;突擊&#34;&gt;突擊&lt;/h2&gt;&#xA;&lt;p&gt;6-8小時&#xA;javaSE 7日 很短的課程和文字類突擊&#xA;&lt;strong&gt;框架項目：&lt;/strong&gt;&#xA;javaweb: cookie session tomcat&#xA;ssm: spring + springmvc mybatis -＞ spring好好學二天夠，（mvc了解只看只背，mybatis了解一下即可&amp;ndash;》2天）&#xA;springboot： 找個簡單的視頻搭個demo即可。一天。&#xA;項目： 做2個 springboot+redis+mq 找個跟着視頻抄，15天即可，一定要一直運行和解決。&#xA;突擊： 找個帶你入門ssm +springboot 像蒼穹外賣&#xA;20天的時間&lt;/p&gt;&#xA;&lt;p&gt;八股文複習： java:字符串，集合，面向對象知識&#xA;spring mybatis 看幾道核心面試題&#xA;mysql+redis 數據庫的要多看。索引 ，事務&#xA;看文章＋面試題&#xA;計算機網絡＋操作系統，看常見面試題&#xA;linux : 常見命令。直接找面試題背誦&#xA;10天左右&#xA;然後就可以投出去了&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/1.-java%E5%85%A5%E9%96%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/1.-java%E5%85%A5%E9%96%80/</guid>
      <description>&lt;h3 id=&#34;運行流程&#34;&gt;運行流程&lt;/h3&gt;&#xA;&lt;p&gt;java&amp;ndash;&amp;gt;編譯器&amp;ndash;＞字節碼&amp;ndash;&amp;gt;虛擬機JVM執行bytecode&amp;ndash;&amp;gt;系統機器執行&#xA;^java是解釋型和編釋型混合語言&lt;/p&gt;&#xA;&lt;p&gt;JDK (- JRE (- JVM&lt;/p&gt;&#xA;&lt;p&gt;用記事本就可以打印一個java程序&#xA;javac xxx.java&lt;/p&gt;&#xA;&lt;p&gt;main方法構造固定:&#xA;public static void main(String[], args)&lt;/p&gt;&#xA;&lt;p&gt;每一個類都一個新的java檔&lt;/p&gt;&#xA;&lt;h5 id=&#34;入門dos命令&#34;&gt;入門DOS命令：&lt;/h5&gt;&#xA;&lt;p&gt;cd, cd.., dir, cls&amp;hellip;&lt;/p&gt;&#xA;&lt;h3 id=&#34;idea入門&#34;&gt;IDEA入門&lt;/h3&gt;&#xA;&lt;p&gt;快捷鍵：&#xA;sout = System.out.print();&#xA;soutm = System.out.println(&amp;ldquo;描述：所在類中的，所在方法&amp;rdquo;)；//debug?&#xA;main=public static void main&#xA;類結構視圖：alt + 7&#xA;類源碼： ctrl＋右鍵&#xA;自動生成構造器、get、set方法等：alt+insert&#xA;查看錯誤和可能建議：alt(option)+enter，ctrl+1or2，ctrl+alt+t&#xA;查看方法的源頭：ctrl+alt&#xA;看繼承結構: ctrl+H (Hierarchy)&lt;/p&gt;&#xA;&lt;p&gt;知識：&#xA;src文件夾是原碼source code&#xA;out 是編釋後的java&lt;/p&gt;&#xA;&lt;h3 id=&#34;入門編程&#34;&gt;入門編程&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;標識符（類命名規範）：_ ,字母，$ 開頭 &amp;ndash;&amp;gt; 首字母大寫；不要命名為l或I（大寫i)的變量，容易混淆，long類型使用大寫L&lt;/li&gt;&#xA;&lt;li&gt;JAVA保留字又叫關鍵字；&lt;/li&gt;&#xA;&lt;li&gt;變量的聲明, 類型有局部變量（從屬於方法），成員變量（從屬於對象），靜態變量（static, 從屬於類）；&lt;/li&gt;&#xA;&lt;li&gt;常量，只能賦一次值  &lt;code&gt;final double PI = 3.1413;&lt;/code&gt; 命名全用大寫，分隔用___，字符常量稱為3.1413， PI稱為符號常量&lt;/li&gt;&#xA;&lt;li&gt;操作較大數是留意是否溢出&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;數據類型&#34;&gt;數據類型&lt;/h2&gt;&#xA;&lt;p&gt;容量大的能自動兼容容量小的，反之報錯會損失精度或者隨機變值，要強制轉換[(int) a]或1L&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/2.-java%E5%85%A5%E9%96%80%E5%9F%BA%E7%A4%8E%E9%82%8F%E8%BC%AF%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/2.-java%E5%85%A5%E9%96%80%E5%9F%BA%E7%A4%8E%E9%82%8F%E8%BC%AF%E5%8A%9F%E8%83%BD/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;腦中能把流程圖和代碼轉換起來&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;變量--順序略-條件判斷選擇結構&#34;&gt;變量 + 順序（略）, 條件判斷(選擇結構)：&lt;/h4&gt;&#xA;&lt;p&gt;只筆記switch，面對多值時使用:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt;(表達式){ &lt;span style=&#34;color:#75715e&#34;&gt;//表達式是int等(long不行)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; 1: &lt;span style=&#34;color:#75715e&#34;&gt;//表達式的值為1時，char字符也行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;action1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//可選跳出,否則執行action2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; 2:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;action2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;... &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;actionDefault;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//一路操入尸&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;循環結構-人生的一切&#34;&gt;循環結構： 人生的一切&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;當型&lt;/strong&gt;： 當為true時反復執行某語句，當布爾表達式值為false時停止跳出，如while 與for循環；&#xA;&lt;strong&gt;直到型&lt;/strong&gt;： 先執行某語句x再判斷布爾表達式，若true再執行某語句x，反復執行直到為false停止，比如do-while循環。可被while, for替代。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;while:&lt;/strong&gt; 語句應使循環趨向結束，否則是死循環&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(){循環體}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;&lt;strong&gt;for:&lt;/strong&gt; 更完整的while&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(初始表達式&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；&lt;/span&gt;布爾表達式&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；&lt;/span&gt;迭代因子){循環體}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在迭代因子中對數值運算,也可以在循環體中運算&#xA;學到的編程：&#xA;% 以餘數來判斷對某類數的類型；&#xA;println會轉行，print直接後接輸出；&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;嵌套循環&lt;/strong&gt; 一般兩層 i++. j++&#xA;從一個小套完成找到規律後再套一個循環&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Break 和 Continue語句&lt;/strong&gt;： 對while用 if &amp;hellip;break&#xA;Continue  outer 跳到outer: ；相當於C中的goto&lt;/p&gt;&#xA;&lt;p&gt;變量命名和向用戶說明和異常處理都是必需注意項&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;for-each 循環遍歷集合或數組法&#xA;簡潔但無法靈活操作&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//for 元素類型 變量名：集合或數組&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (number num:list){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/3.-java%E9%9D%A2%E5%90%91%E5%B0%8D%E8%B1%A1%E5%85%A5%E9%96%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/3.-java%E9%9D%A2%E5%90%91%E5%B0%8D%E8%B1%A1%E5%85%A5%E9%96%80/</guid>
      <description>&lt;h4 id=&#34;前提概念&#34;&gt;前提概念&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;方法： 一個黑盒完成一個任務，在其他語言中稱為function函數； 方法用於定義該類或其實例行為和功能實現。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;修飾符&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;］&lt;/span&gt;數據類型 方法名&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;（&lt;/span&gt;形式參數&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;{JAVA語句&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;；⋯⋯&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;沒有輸入輸出用void&#xA;構建時叫形式參數，實用時叫實際參數&#xA;2. 語句塊 {{這裏是語句塊}}&#xA;3. overload重載：一個類定義多個名稱相同，方法不一樣。&#xA;參數列表個數不同構成方法重載，參數類型不一樣構成重載。&#xA;但僅參數名稱不同不構成重載，以及，返回值不同不構成重載。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;让程序员不需要记住多个方法名称， 只需要关注传递的参数即可。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;ol start=&#34;4&#34;&gt;&#xA;&lt;li&gt;遞歸： 自己調自己, 在深度優先搜索會用到, 包含遞歸頭（不調用的頭，結束條件），遞歸體（調用自身方法） 依次調自己，內存＋＋＋，最後反方向依次返回。&#xA;&lt;a href=&#34;https://www.cnblogs.com/Chang-LeHung/p/16485137.html&#34;&gt;深入剖析斐波拉契数列 - 一无是处的研究僧 - 博客园&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;心態&#34;&gt;心態&lt;/h3&gt;&#xA;&lt;p&gt;概念非常多，後面全部都是面向對象&#xA;類和對象&amp;ndash;&amp;gt;內存&amp;ndash;&amp;gt;this,static&amp;ndash;&amp;gt;繼承，封裝，多態&amp;ndash;&amp;gt;抽象類，內部類&#xA;平常多看看複習&#xA;我表哥(格)是我對象&lt;/p&gt;&#xA;&lt;h5 id=&#34;感性認識&#34;&gt;感性認識&lt;/h5&gt;&#xA;&lt;p&gt;表的列field (表格字段) to field (類屬性)&#xA;action to 方法method&#xA;表的每行就是對象&lt;/p&gt;&#xA;&lt;p&gt;兩種解決方法思維，是代碼構建方式：&#xA;不用協作構建面向過程&amp;quot;執行者思維&amp;quot; 到 複雜組成構建的面向對象&amp;quot;設計者思維&amp;quot;(製造汽車🚗)&lt;/p&gt;&#xA;&lt;p&gt;設計時，先從問題中找名詞，這些個名詞哪些名詞可作為類，根據問題決定類的屬性和方法 （類比寫詩，寫小說，不是一步到位的）&lt;/p&gt;&#xA;&lt;p&gt;對建屋來說，類class就是圖紙，然後建立一個個object, instance&lt;/p&gt;&#xA;&lt;h4 id=&#34;入門認識&#34;&gt;入門認識&lt;/h4&gt;&#xA;&lt;p&gt;對一個class來說，含三種成員： 屬性field(靜態), 方法method(動態), 構造器 constructor.&#xA;就可以new 一個對象 object&#xA;new一個對象的過程：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;聲明對象名和類型&amp;ndash;&amp;gt;用new實例化對象&amp;ndash;&amp;gt;new用構造方法創建對象&#xA;屬性不賦初始值就會自動賦0&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;引用類型 s1 = new 構造器()；&#xA;引用類型是四個字節保存內地地址&lt;/p&gt;&#xA;&lt;h3 id=&#34;構造器-constructor&#34;&gt;構造器 Constructor&lt;/h3&gt;&#xA;&lt;p&gt;構造器用於初始化邏輯不是創建對象用&#xA;&lt;strong&gt;構造器通過new關鍵字調用&lt;/strong&gt;，&#xA;系統自動為類定義無參數的構造器，&#xA;構造器方法名必須和類名一致，&#xA;構造器沒有返回類型&#xA;無參類系統會默認一個無參構造器及默認值，如果定義一個無參構造器則可以初始化；&#xA;帶參構造器允許在創建對象時傳遞參數來定制對象初始狀態；&#xA;構造器重載方便應對多種輸入&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/4.-%E6%95%B8%E7%B5%84%E5%8F%8A%E5%85%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/4.-%E6%95%B8%E7%B5%84%E5%8F%8A%E5%85%B6%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;數組也是對象，數組的元素相當對象的屬性, 數組是相同類型數據的有序集合，長度聲明中確定，每個數據稱一個元素，索引由零開始。&#xA;內容：概念特點，常見操作，多維數組結構，算法&#xA;聲明：&#xA;type[] arr_name;&#xA;type arr_name[];&#xA;對基本類型和引用類型的調用&lt;/p&gt;&#xA;&lt;h4 id=&#34;數組初始化&#34;&gt;數組初始化&lt;/h4&gt;&#xA;&lt;p&gt;1.靜態初始 2.動態初始 3.默認初始&#xA;1.：int[]a= {1,3,4,5,6};&#xA;直接花括號定義&lt;/p&gt;&#xA;&lt;h4 id=&#34;數組遍歷與複製&#34;&gt;數組遍歷與複製&lt;/h4&gt;&#xA;&lt;h5 id=&#34;遍歷&#34;&gt;遍歷&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;int [] s; s=new int[10]; s.length for循環方法；&lt;/li&gt;&#xA;&lt;li&gt;for-each 循環&#xA;專用於讀取數組或容器中所有元素&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]=&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;2;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//臨時遍歷  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;a.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// for-each 只能全部元素全遍歷，簡單遍歷 &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; bianli:a){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(bianli);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;複製copy&#34;&gt;複製（copy)&lt;/h5&gt;&#xA;&lt;p&gt;System.arraycopy(object srcArray, int srcPosition, object destinationArray, int destinationPosition, int length)&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/5.-java%E5%9F%BA%E7%A4%8E%E6%B7%B1%E5%8C%96%E9%9B%9C%E9%A0%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/5.-java%E5%9F%BA%E7%A4%8E%E6%B7%B1%E5%8C%96%E9%9B%9C%E9%A0%85/</guid>
      <description>&lt;p&gt;異常機制，常用類，容器，數據結構，智能電話本實戰，IO流，多線程，網絡編程，反射技術，Lambda表達式。&lt;/p&gt;&#xA;&lt;h2 id=&#34;異常機制exception-error&#34;&gt;==異常機制Exception, Error==&lt;/h2&gt;&#xA;&lt;p&gt;工作中程序如果存在各種條件不滿足造成報錯時稱為異常.&#xA;所以要考慮各種所有異常情況來防止程序崩潰。&#xA;例如Copy要文件存在，目標文件夾存在，空間是否足夠，IO流中途中斷。&#xA;邏輯代碼和錯誤處理不應混合地寫，太複雜，JAVA中用TryCatch異常類來處理。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;{JAVA語句}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(Exception e){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;e.&lt;span style=&#34;color:#a6e22e&#34;&gt;printStackTrace&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;java.lang.Throwable 拋出錯誤分為兩種：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Error（JVM崩潰，重啟解決）&lt;/li&gt;&#xA;&lt;li&gt;Exception（程序異常）:&#xA;RuntimeException：增加邏輯來規避讓程序執行&#xA;CheckedException ：捕獲異常,先捕獲子類 ；&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h5 id=&#34;解決方法&#34;&gt;解決方法：&lt;/h5&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;try{}&amp;ndash;&amp;gt;catch{}&amp;ndash;&amp;gt;finally(回收資源);&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;throws Exception&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;資源自動關閉（JDK7）&lt;strong&gt;try with resource&lt;/strong&gt;:&#xA;try(放在這裏的會自動.close){}&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自定義一個Exception&lt;/strong&gt;&#xA;&lt;em&gt;&lt;strong&gt;感覺沒聽明白，可能講得不好，請求更多教材！！&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;java常用類原代碼學習&#34;&gt;JAVA常用類原代碼學習&lt;/h2&gt;&#xA;&lt;p&gt;(面試也考)&#xA;包裝類8，字符串相關類，時間類，其他。&#xA;基於面向對象&lt;/p&gt;&#xA;&lt;h3 id=&#34;包裝類&#34;&gt;包裝類&lt;/h3&gt;&#xA;&lt;p&gt;使基本數據類型具對象特性：int, char包裝為Integer, Double等對象供需對象的場景使用&#xA;含：Byte, Boolean, Short, Character, Integer, Long, Float, Double&lt;/p&gt;&#xA;&lt;h3 id=&#34;自動裝箱和拆箱&#34;&gt;自動裝箱和拆箱&lt;/h3&gt;&#xA;&lt;p&gt;Autoboxing &amp;amp; Unboxing&#xA;將基本數據類型和包裝類自動轉換,編譯器捷徑&#xA;裝箱：&#xA;&lt;code&gt;Integer i = 100; //&amp;lt;==&amp;gt;Integer i = Integer.ValueOf(100);&lt;/code&gt;&#xA;拆箱：&#xA;&lt;code&gt;Integer y=i; //&amp;lt;==&amp;gt;int y = i.intValue();&lt;/code&gt;&#xA;自動裝箱時，［-128，127」之間有緩存&#xA;MyInteger的思路懂但實現沒搞懂&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/6.-%E5%8F%8D%E5%B0%84%E6%8A%80%E8%A1%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/6.-%E5%8F%8D%E5%B0%84%E6%8A%80%E8%A1%93/</guid>
      <description>&lt;p&gt;介紹&#xA;創建對象過程&#xA;反射實現&#xA;效率&lt;/p&gt;&#xA;&lt;h3 id=&#34;介紹&#34;&gt;介紹：&lt;/h3&gt;&#xA;&lt;p&gt;運行時改變代碼＝動態語言像Python Ruby JS&#xA;JAVA需要反射機制實現動態性&#xA;反射的作用：&#xA;-RunTime Type Ident ; Dynamic Creation&#xA;-允許程序運行時取得任何已知名class的內部信息&#xA;-查看修飾符，屬性，方法以及修改屬性和調用方法&#xA;-使用不當效率降低&#xA;-框架常用此機制&lt;/p&gt;&#xA;&lt;p&gt;創建JAVA對象的三階段&#xA;Source&amp;ndash;Load&amp;ndash;&amp;gt;Class&amp;ndash;&amp;gt;Runtime (new)&lt;/p&gt;&#xA;&lt;p&gt;創建對象時Class中的內存結構&#xA;棧。堆。方法區(堆)&lt;/p&gt;&#xA;&lt;p&gt;在方法區有很多類對象有且只有一個的本體叫Class對象，所以可以利用這個來知道類結構。看這個對象反映類結構，因此叫反射。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;獲取Class對象的實現：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;實例.getClass()&lt;/code&gt;在Object類下需要先實例化&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;類.class&lt;/code&gt; 不需要實例化更簡單&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;forName(String classname)&lt;/code&gt; 在Class static的類&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;strong&gt;獲取類的構造方法：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;getDeclaredConstructors()&lt;/code&gt;返回數組，該類所有修飾的構造方法&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;getConstructors()&lt;/code&gt;返回公共構造方法&#xA;&lt;strong&gt;帶參數&lt;/strong&gt;類似以上, ()中是指定的類型class：&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;getConstructor(Class&amp;lt;?&amp;gt;...parameterTypes)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;getDeclaredConstructor(Class&amp;lt;?&amp;gt;...parameterTypes)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://giiitdavid.github.io/posts/7.-lamda-%E8%A1%A8%E9%81%94%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://giiitdavid.github.io/posts/7.-lamda-%E8%A1%A8%E9%81%94%E5%BC%8F/</guid>
      <description>&lt;p&gt;快速建立匿名類和其他快速寫法但不好看&#xA;能夠&#xA;&lt;a href=&#34;https://blog.csdn.net/xiaole0313/article/details/100415719&#34;&gt;看完这篇文章，再学不会Lambda表达式，来打我！-CSDN博客&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;實現快速實現接口？&lt;/p&gt;&#xA;&lt;h4 id=&#34;語法&#34;&gt;語法&lt;/h4&gt;&#xA;&lt;p&gt;(parameters)-&amp;gt;{statements;}&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;-&amp;gt;叫goes to&#xA;例子如：&#xA;(int x, int y )-&amp;gt;x+y&#xA;x-&amp;gt;2*x&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;//無參數不能省略（）, 僅一參數可省略(), 參數類型可省略，僅一語句可省略{}&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FunctionalInterface&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//強制只有一個方法  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NoReturnOnePrarm&lt;/span&gt;{  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NoReturnOnePrarm nRoP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;noRoneP&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a); &lt;span style=&#34;color:#75715e&#34;&gt;//(int a)-&amp;gt;{ 可省略int,(), {}  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nRoP.&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt;(999);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;lamda實現引用函數&#34;&gt;Lamda實現引用函數：&lt;/h4&gt;&#xA;&lt;p&gt;方法歸屬者：：方法名&#xA;其中歸屬者靜態時為類名，普通方法則為對象&lt;/p&gt;&#xA;&lt;p&gt;（Lamda表達式把外部方法作為&amp;ndash;&amp;gt;函數接口的抽象方法的具體實現）&lt;/p&gt;&#xA;&lt;h4 id=&#34;lamda表達式來創建線程&#34;&gt;Lamda表達式來創建線程：&lt;/h4&gt;&#xA;&lt;p&gt;更優雅的直接創建線程：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//Runnable 的Run（）方法的Lamda快速實現  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lamdathread&lt;/span&gt; {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start Thread&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(()&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;{  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;20;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Lamda Thread&amp;#34;&lt;/span&gt; ).&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//一句搞定  &lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(Thread.&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;getName&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;END Thread&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;lamda對集合的操作&#34;&gt;Lamda對集合的操作&lt;/h4&gt;&#xA;&lt;p&gt;forEach(),iterator()&#xA;1對list進行操作：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
